from jolt import Alias, BooleanParameter, Parameter, Task, TaskGenerator, Tools
from jolt import attributes, influence
from jolt import __version__
from jolt.plugins import cxx, docker, git, selfdeploy

from os import getenv


class Jolt(selfdeploy.Jolt):
    version = Parameter(__version__, influence=False)


@influence.files("{dockerfile}")
@attributes.requires("requires_push_{push}")
class JoltImage(docker.DockerImage):
    name = "jolt/image"
    dockerfile = "docker/Dockerfile"
    push = BooleanParameter(False)
    requires = ["jolt:version={version}", "docker/cli"]
    requires_push_true = ["docker/login"]
    tags = ["robrt/jolt:latest", "robrt/jolt:{version}", "robrt/jolt:{minor_version}"]
    version = Parameter(__version__, influence=False)

    @property
    def minor_version(self):
        from jolt.version_utils import version
        v = version(str(self.version))
        return f"{v.major}.{v.minor}"

    def run(self, deps, tools):
         self.context = tools.sandbox(deps["jolt:version={version}"])
         tools.copy("{dockerfile}", "{context}/docker/")
         super().run(deps, tools)


@influence.files("{dockerfile}")
@attributes.requires("requires_push_{push}")
class RabbitImage(docker.DockerImage):
    name = "jolt/rabbitmq"
    buildargs = ["VERSION={version}"]
    dockerfile = "docker/Dockerfile.rabbitmq"
    push = BooleanParameter(False)
    requires = ["docker/cli"]
    requires_push_true = ["docker/login"]
    tags = ["robrt/rabbitmq:latest", "robrt/rabbitmq:{version}"]
    version = Parameter("3.9")


@influence.files("{dockerfile}")
@attributes.requires("requires_push_{push}")
@git.influence("remote")
class SchedulerImage(docker.DockerImage):
    name = "jolt/scheduler"
    dockerfile = "docker/Dockerfile.scheduler"
    push = BooleanParameter(False)
    requires = ["docker/cli"]
    requires_push_true = ["docker/login"]
    version = Parameter(__version__, influence=False)
    tags = [
        "robrt/jolt/scheduler:{identity}",
        "robrt/jolt/scheduler:latest",
        "robrt/jolt/scheduler:{version}",
    ]


@influence.files("{dockerfile}")
@attributes.requires("requires_push_{push}")
@git.influence("remote")
class WorkerImage(SchedulerImage):
    name = "jolt/worker"
    dockerfile = "docker/Dockerfile.worker"
    tags = [
        "robrt/jolt/worker:{identity}",
        "robrt/jolt/worker:latest",
        "robrt/jolt/worker:{version}",
    ]


@influence.files("**/*.py")
@git.influence("docs")
class JoltDocs(Task):
    name = "jolt/docs"

    def run(self, deps, tools):
        with tools.cwd("docs"):
            tools.run("make clean html")

    def publish(self, artifact, tools):
        with tools.cwd("docs/_build/html"):
            artifact.collect("*")


@attributes.environ("TWINE_USERNAME")
@attributes.environ("TWINE_PASSWORD")
class JoltWheel(Task):
    name = "jolt/pypi"

    release = BooleanParameter(False)
    requires = ["jolt:version={version}"]
    version = Parameter(__version__, influence=False)

    def run(self, deps, tools):
        tools.run("python3 -m pip install --upgrade setuptools wheel")
        tools.run("python3 -m pip install --upgrade twine")
        self.builddir = tools.sandbox(deps["jolt:version={version}"])
        with tools.cwd(self.builddir):
             tools.run("python3 setup.py sdist bdist_wheel")
             if self.release:
                  tools.run("python3 -m twine upload dist/*")

    def publish(self, artifact, tools):
        with tools.cwd(self.builddir):
             artifact.collect("dist")



@attributes.environ("TWINE_USERNAME")
@attributes.environ("TWINE_PASSWORD")
@git.influence("docker/wrapper")
class JoltWrapperWheel(Task):
    name = "jolt/docker/pypi"

    release = BooleanParameter(False)
    version = Parameter(__version__, influence=False)

    def run(self, deps, tools):
        tools.run("python3 -m pip install --upgrade setuptools wheel")
        tools.run("python3 -m pip install --upgrade twine")
        with tools.cwd(tools.builddir()):
            tools.copy("{joltdir}/docker/wrapper", ".")
            tools.run("python3 setup.py sdist bdist_wheel")
            if self.release:
                tools.run("python3 -m twine upload dist/*")

    def publish(self, artifact, tools):
        with tools.cwd(tools.builddir()):
             artifact.collect("dist")


@git.influence("debian")
class JoltDebianPackage(docker.DockerImage):
    name = "jolt/debian"
    dockerfile = "{joltdir}/debian/Dockerfile"
    extract = True
    imagefile = None
    requires = ["jolt:version={version}"]
    version = Parameter(__version__, influence=False)

    def run(self, deps, tools):
        self.context = tools.builddir()
        with tools.cwd(self.context):
            deps["jolt:version={version}"].copy("*", "jolt-{version}")
            tools.copy("{joltdir}/debian", "jolt-{version}/debian/")
            with tools.cwd("jolt-{version}/debian"):
                tools.write_file("changelog", tools.render_file("changelog"))
        super().run(deps, tools)


class ProtobufTools(docker.DockerImage):
    name = "jolt/protobuf-tools"
    dockerfile = "FROM alpine:latest\nRUN apk add protobuf-dev protoc py3-pip && pip install grpcio-tools"
    extract = True
    imagefile = None


@git.influence("protocol")
class GenerateProtobufs(cxx.Compilation):
    name = "jolt/protobufs"
    incpaths = ["."]
    requires = ["tools=jolt/protobuf-tools"]
    sources = [
        "jolt/common.proto",
        "jolt/plugins/remote_execution/administration.proto",
        "jolt/plugins/remote_execution/scheduler.proto",
        "jolt/plugins/remote_execution/worker.proto",
    ]
    protogenerator = ["python", "python_grpc"]

    def run(self, deps, tools):
        with tools.chroot(deps["tools"]):
            super().run(deps, tools)

    def publish(self, artifact, tools):
        with tools.cwd(self.outdir):
            artifact.collect("**/*.py")


class Default(Alias):
    push = BooleanParameter(False)

    requires = [
        "jolt/image:push={push}",
        "jolt/pypi:release={push}",
        "jolt/docker/pypi:release={push}",
        "jolt/rabbitmq:push={push}",
    ]


