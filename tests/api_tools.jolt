#!/usr/bin/env python3

import errno
import hashlib
import os
import sys
import time
sys.path.append(".")

from testsupport import JoltTest


class TestException(Exception):
    pass


class ToolsApi(JoltTest):
    name = "api/tools"

    def test_append_file(self):
        """
        --- file: empty.txt---
        --- file: data.txt
        test
        ---
        """
        self.filename = "empty"
        self.filedata = "test"
        with self.tools.cwd(self.ws):
            self.tools.append_file("{filename}.txt", "appended-{filedata}")
            self.assertEqual(self.tools.read_file("{filename}.txt"), "appended-test")

        self.filename = "data"
        self.filedata = "test"
        with self.tools.cwd(self.ws):
            self.tools.append_file("{filename}.txt", "appended-{filedata}")
            self.assertEqual(self.tools.read_file("{filename}.txt"),
                             "test\nappended-test")
    def test_archive_tar(self):
        """
        --- file: original/tests.txt
        testtesttesttest
        --- file: original/subdir/tests2.txt
        testtesttesttest2
        ---
        """
        self.filename = "tests"
        with self.tools.cwd(self.ws):
            self.tools.archive(self.ws+"/original", "{filename}.tar")
            self.tools.run("mkdir {}/extracted", self.ws)
            self.tools.run("tar -xvf tests.tar -C {}/extracted", self.ws)
            self.assertEqual(self.tools.read_file(self.ws+"/original/tests.txt"),
                             self.tools.read_file(self.ws+"/extracted/tests.txt"))
            self.assertEqual(self.tools.read_file(self.ws+"/original/subdir/tests2.txt"),
                             self.tools.read_file(self.ws+"/extracted/subdir/tests2.txt"))

    def test_archive_zip(self):
        """
        --- file: original/tests.txt
        testtesttesttest
        --- file: original/subdir/tests2.txt
        testtesttesttest2
        ---
        """
        self.filename = "tests"
        with self.tools.cwd(self.ws):
            self.tools.archive(self.ws+"/original", "{filename}.zip")
            self.tools.run("unzip tests.zip -d {}/extracted", self.ws)
            self.assertEqual(self.tools.read_file(self.ws+"/original/tests.txt"),
                             self.tools.read_file(self.ws+"/extracted/tests.txt"))
            self.assertEqual(self.tools.read_file(self.ws+"/original/subdir/tests2.txt"),
                             self.tools.read_file(self.ws+"/extracted/subdir/tests2.txt"))

    def test_archive_tar_gz(self):
        """
        --- file: original/tests.txt
        testtesttesttest
        --- file: original/subdir/tests2.txt
        testtesttesttest2
        ---
        """
        self.filename = "tests"
        with self.tools.cwd(self.ws):
            self.tools.archive(self.ws+"/original", "{filename}.tar.gz")
            self.tools.run("mkdir {}/extracted", self.ws)
            self.tools.run("tar xzvf tests.tar.gz -C {}/extracted", self.ws)
            self.assertEqual(self.tools.read_file(self.ws+"/original/tests.txt"),
                             self.tools.read_file(self.ws+"/extracted/tests.txt"))
            self.assertEqual(self.tools.read_file(self.ws+"/original/subdir/tests2.txt"),
                             self.tools.read_file(self.ws+"/extracted/subdir/tests2.txt"))

    def test_archive_tar_bz2(self):
        """
        --- file: original/tests.txt
        testtesttesttest
        --- file: original/subdir/tests2.txt
        testtesttesttest2
        ---
        """
        self.filename = "tests"
        with self.tools.cwd(self.ws):
            self.tools.archive(self.ws+"/original", "{filename}.tar.bz2")
            self.tools.run("mkdir {}/extracted", self.ws)
            self.tools.run("tar xjvf tests.tar.bz2 -C {}/extracted", self.ws)
            self.assertEqual(self.tools.read_file(self.ws+"/original/tests.txt"),
                             self.tools.read_file(self.ws+"/extracted/tests.txt"))
            self.assertEqual(self.tools.read_file(self.ws+"/original/subdir/tests2.txt"),
                             self.tools.read_file(self.ws+"/extracted/subdir/tests2.txt"))

    def test_archive_tar_xz(self):
        """
        --- file: original/tests.txt
        testtesttesttest
        --- file: original/subdir/tests2.txt
        testtesttesttest2
        ---
        """
        self.filename = "tests"
        with self.tools.cwd(self.ws):
            self.tools.archive(self.ws+"/original", "{filename}.tar.xz")
            self.tools.run("mkdir {}/extracted", self.ws)
            self.tools.run("tar xJvf tests.tar.xz -C {}/extracted", self.ws)
            self.assertEqual(self.tools.read_file(self.ws+"/original/tests.txt"),
                             self.tools.read_file(self.ws+"/extracted/tests.txt"))
            self.assertEqual(self.tools.read_file(self.ws+"/original/subdir/tests2.txt"),
                             self.tools.read_file(self.ws+"/extracted/subdir/tests2.txt"))

    def test_builddir_unique(self):
        """
        --- tasks:
        class A(Task):
            def run(self, d, t):
                self.bd = t.builddir("build", incremental=True)
                t.write_file("{{bd}}/test.txt", "test")

        class B(Task):
            requires = ["a"]

            def run(self, d, t):
                self.bd = t.builddir("build", incremental=True)
                assert len(t.glob("{{bd}}/*")) == 0
        ---
        """
        self.build("b")

    def test_builddir_unique_param(self):
        """
        --- tasks:
        class A(Task):
            arg = Parameter()
            def run(self, d, t):
                self.bd = t.builddir("build", incremental=True)
                assert len(t.glob("{{bd}}/*")) == 0
                t.write_file("{{bd}}/test.txt", "test")
        ---
        """
        self.build("a:arg=!")
        self.build("a:arg=/")

    def test_builddir_shared(self):
        """
        --- tasks:
        class A(Task):
            def run(self, d, t):
                self.bd = t.builddir("build", incremental=True, unique=False)
                t.write_file("{{bd}}/test.txt", "test")

        class B(Task):
            requires = ["a"]

            def run(self, d, t):
                self.bd = t.builddir("build", incremental=True, unique=False)
                assert len(t.glob("{{bd}}/*")) == 1
        ---
        """
        self.build("b")

    def test_builddir_name(self):
        """
        --- tasks:
        class A(Task):
            def run(self, d, t):
                self.dirname = "test1234"
                t.builddir(incremental=True)
                t.builddir("{{dirname}}", incremental=True)
        ---
        """
        self.build("a")
        dirs = " ".join(self.tools.glob(self.ws+"/build/*"))
        self.assertIn("/build-a", dirs)
        self.assertIn("/test1234-a", dirs)

    def test_builddir_incremental(self):
        """
        --- tasks:
        class A(Task):
            def run(self, d, t):
                bd = t.builddir("build", incremental=True)
                print("File#", len(t.glob(bd+"/*")))
                t.write_file(bd + "/test.txt", "test")

        class B(Task):
            def run(self, d, t):
                bd = t.builddir("build", incremental=False)
                print("File#", len(t.glob(bd+"/*")))
                t.write_file(bd + "/test.txt", "test")
        ---
        """
        o = self.build("a")
        self.assertIn("File# 0", o)
        a = self.artifacts(o)
        self.tools.rmtree(a[0])
        o = self.build("a")
        self.assertIn("File# 1", o)

        o = self.build("b")
        self.assertIn("File# 0", o)
        b = self.artifacts(o)
        self.tools.rmtree(b[0])
        o = self.build("b")
        self.assertIn("File# 0", o)

    def test_builddir_incremental_when_disabled(self):
        """
        --- config:
        incremental_dirs = false

        --- tasks:
        class A(Task):
            def run(self, d, t):
                bd = t.builddir("build", incremental=True)
                print("File#", len(t.glob(bd+"/*")))
                t.write_file(bd + "/test.txt", "test")

        class B(Task):
            def run(self, d, t):
                bd = t.builddir("build", incremental=False)
                print("File#", len(t.glob(bd+"/*")))
                t.write_file(bd + "/test.txt", "test")
        ---
        """
        o = self.build("a")
        self.assertIn("File# 0", o)
        a = self.artifacts(o)
        self.tools.rmtree(a[0])
        o = self.build("a")
        self.assertIn("File# 0", o)

        o = self.build("b")
        self.assertIn("File# 0", o)
        b = self.artifacts(o)
        self.tools.rmtree(b[0])
        o = self.build("b")
        self.assertIn("File# 0", o)

    def test_builddir_incremental_with_publish(self):
        """
        --- tasks:
        class A(Task):
            def run(self, d, t):
                bd = t.builddir("build", incremental=True)
                print("File#", len(t.glob(bd+"/*")))
                t.write_file(bd + "/test.txt", "test")

            def publish(self, a, t):
                bd = t.builddir("build", incremental=True)
                print("Publish#", len(t.glob(bd+"/*")))
                t.read_file(bd + "/test.txt")

        class B(Task):
            def run(self, d, t):
                bd = t.builddir("build", incremental=False)
                print("File#", len(t.glob(bd+"/*")))
                t.write_file(bd + "/test.txt", "test")

            def publish(self, a, t):
                bd = t.builddir("build", incremental=False)
                t.read_file(bd + "/test.txt")
        ---
        """
        o = self.build("a")
        self.assertIn("File# 0", o)
        self.assertIn("Publish# 1", o)
        a = self.artifacts(o)
        self.tools.rmtree(a[0])
        o = self.build("a")
        self.assertIn("File# 1", o)

        o = self.build("-f a")
        self.assertIn("File# 0", o)
        self.assertIn("Publish# 1", o)

        o = self.build("b")
        self.assertIn("File# 0", o)
        b = self.artifacts(o)
        self.tools.rmtree(b[0])
        o = self.build("b")
        self.assertIn("File# 0", o)

    def test_checksum(self):
        """
        --- file: test1.txt
        test
        --- file: test2.txt
        t e s t
        ---
        """
        with self.tools.cwd(self.ws):
            shasum = self.tools.checksum_file("test1.txt")
            self.assertEqual(hashlib.sha1(self.tools.read_file("test1.txt").encode()).hexdigest(), shasum)

            md5sum = self.tools.checksum_file("test1.txt", hashfn=hashlib.md5)
            self.assertEqual(hashlib.md5(self.tools.read_file("test1.txt").encode()).hexdigest(), md5sum)

            shalist = self.tools.checksum_file(["test1.txt", "test2.txt"])
            self.assertEqual(2, len(shalist))
            self.assertEqual(shasum, shalist[0])
            self.assertNotEqual(shalist[0], shalist[1])

            shalist = self.tools.checksum_file(["test1.txt", "test2.txt"], filterfn=lambda data: filter(lambda n: n == " ", data))
            self.assertEqual(shalist[0], shalist[1])

    def test_chroot(self):
        """
        --- tasks:
        from jolt.plugins import docker
        import os

        class Busybox(docker.DockerImage):
            dockerfile = \"\"\"
            FROM busybox:latest
            RUN busybox mkdir -p /sbin /usr/bin
            RUN busybox --install
            \"\"\"
            extract = True
            requires = ["docker/cli"]

        class Test(Task):
            requires = "busybox"

            def run(self, d, t):
                with t.cwd(t.builddir()):
                    with t.chroot(d["busybox"]):
                        workdir = t.run("pwd")
                        assert workdir == t.builddir(), "working dir not stable"
                    with t.chroot(d["busybox"].paths.rootfs):
                        workdir = t.run("pwd")
                        workdir2 = t.run("pwd")
                        assert workdir == workdir2, "working dir not stable"
                        t.run("busybox > output.txt")
                        with t.environ(FOO="bar"):
                            foo = t.run("env | grep FOO")
                assert t.builddir() == workdir, "incorrect working directory"
                assert "bar" in foo, "incorrect environment variable"

            def publish(self, a, t):
                a.collect("*", cwd=t.builddir())

        class Test2(Task):
            requires = ["test"]
            def run(self, d, t):
                with t.chroot(d["test"]):
                    pass
        ---
        """
        try:
            self.tools.run("unshare -rm uname")
        except Exception:
            self.skip("required privileges not held")
        o = self.build("test")
        a = self.artifacts(o)
        self.assertExists(os.path.join(a[0], "output.txt"))
        with self.assertRaises(Exception):
            self.build("test2")
        self.assertIn("No 'rootfs' path in artifact", self.lastLog())

    def test_chroot_mounts_buildroot(self):
        """
        --- file: default.joltxmanifest
        <?xml version="1.0" ?>
        <jolt-manifest workspace="." version=">=0.9.0">
          <project name="test">
            <recipe src="subdir/build.py" joltdir="subdir" />
          </project>
        </jolt-manifest>

        --- file: subdir/build.py
        from jolt import Task
        from jolt.plugins import docker
        import os

        class Busybox(docker.DockerImage):
            dockerfile = \"\"\"
            FROM busybox:latest
            RUN busybox mkdir -p /sbin /usr/bin
            RUN busybox --install
            \"\"\"
            extract = True
            requires = ["docker/cli"]

        class Test(Task):
            requires = "busybox"

            def run(self, d, t):
                with t.cwd(t.builddir()):
                    with t.chroot(d["busybox"].paths.rootfs):
                        workdir = t.run("pwd")
                        workdir2 = t.run("pwd")
                        assert workdir == workdir2, "working dir not stable"
                        t.run("busybox > output.txt")
                        with t.environ(FOO="bar"):
                            foo = t.run("env | grep FOO")
                assert t.builddir() == workdir, "incorrect working directory"
                assert "bar" in foo, "incorrect environment variable"

            def publish(self, a, t):
                a.collect("*", cwd=t.builddir())
        ---
        """
        try:
            self.tools.run("unshare -rm uname")
        except Exception:
            self.skip("required privileges not held")
        o = self.build("test")
        a = self.artifacts(o)
        self.assertExists(os.path.join(a[0], "output.txt"))

    def test_cwd_non_existing(self):
        with self.assertRaisesRegex(Exception, "failed to change directory"):
            with self.tools.cwd("nonexisting"):
                pass

    def test_download(self):
        with self.tools.cwd(self.ws):
            with self.assertRaises(Exception):
                self.tools.download("https://www.sunet.se/invalid", "index.html")
            self.tools.download("https://www.sunet.se/", "index.html")

    def test_upload(self):
        with self.tools.cwd(self.ws):
            self.tools.write_file("index.html")
            with self.assertRaises(Exception):
                self.tools.upload("index.html", "https://www.example.com/invalid")

    def test_environ(self):
        with self.tools.environ(FOO="bar"):
            self.assertEqual(self.tools.run("echo $FOO"), "bar")
            with self.tools.environ(FOO="baz"):
                self.assertEqual(self.tools.run("echo $FOO"), "baz")
            with self.tools.environ(FOO=None):
                self.assertEqual(self.tools.run("echo $FOO"), "")
        self.assertEqual(self.tools.run("echo $FOO"), "")

    def test_expand(self):
        """
        --- tasks:
        class A(Task):
            param = Parameter("aA")

            def run(self, deps, tools):
                assert tools.expand("{{param!u}}") == "AA"
                assert tools.expand("{{param!l}}") == "aa"
                assert tools.expand("{{param.value.upper!c}}") == "AA"
                assert tools.expand("{{param.value.lower!c}}") == "aa"
                with tools.environ(FOO="foobar123"):
                    assert tools.expand("{{environ[FOO]}}") == "foobar123"
        ---
        """
        self.build("a")

    def test_extract_zip(self):
        with self.tools.cwd(self.ws):
            self.tools.run("zip tests.zip ../../api_tools.jolt")
            self.tools.extract("tests.zip", self.ws)
            self.assertExists("api_tools.jolt")

    def test_extract_zip_with_execute_bits(self):
        """
        --- file: test1.txt
        test
        --- file: test2.txt
        t e s t
        ---
        """
        with self.tools.cwd(self.ws):
            self.tools.chmod("test1.txt", 0o555)
            self.tools.run("zip tests.zip *.txt")
            self.tools.extract("tests.zip", "extracted/")
            self.assertExists("extracted/test1.txt")
            self.assertTrue(os.access(self.tools.expand_path("extracted/test1.txt"), os.X_OK))

    def test_extract_zip_specific_file(self):
        """
        --- file: test1.txt
        test
        --- file: test2.txt
        t e s t
        ---
        """
        with self.tools.cwd(self.ws):
            self.tools.run("zip tests.zip *.txt")
            self.tools.extract("tests.zip", "extracted/", files=["test1.txt"])
            self.assertExists("extracted/test1.txt")
            self.assertNotExists("extracted/test2.txt")

    def test_extract_tar_gz(self):
        with self.tools.cwd(self.ws):
            self.tools.run("tar czvf tests.tar.gz ../../api_tools.jolt")
            self.tools.extract("tests.tar.gz", self.ws)
            self.assertExists("api_tools.jolt")

    def test_extract_tar_gz_specific_file(self):
        """
        --- file: test1.txt
        test
        --- file: test2.txt
        t e s t
        ---
        """
        with self.tools.cwd(self.ws):
            self.tools.run("tar czvf tests.tar.gz ./test1.txt ./test2.txt")
            self.tools.extract("tests.tar.gz", "extracted/", files=["./test1.txt"])
            self.assertExists("extracted/test1.txt")
            self.assertNotExists("extracted/test2.txt")

    def test_extract_tar_bz2(self):
        with self.tools.cwd(self.ws):
            self.tools.run("tar cjvf tests.tar.bz2 ../../api_tools.jolt")
            self.tools.extract("tests.tar.bz2", self.ws)
            self.assertExists("api_tools.jolt")

    def test_extract_tar_bz2_specific_file(self):
        """
        --- file: test1.txt
        test
        --- file: test2.txt
        t e s t
        ---
        """
        with self.tools.cwd(self.ws):
            self.tools.run("tar cjvf tests.tar.bz2 ./test1.txt ./test2.txt")
            self.tools.extract("tests.tar.bz2", "extracted/", files=["./test1.txt"])
            self.assertExists("extracted/test1.txt")
            self.assertNotExists("extracted/test2.txt")

    def test_extract_tar_xz(self):
        with self.tools.cwd(self.ws):
            self.tools.run("tar cJvf tests.tar.xz ../../api_tools.jolt")
            self.tools.extract("tests.tar.xz", self.ws)
            self.assertExists("api_tools.jolt")

    def test_extract_tar_xz_specific_file(self):
        """
        --- file: test1.txt
        test
        --- file: test2.txt
        t e s t
        ---
        """
        with self.tools.cwd(self.ws):
            self.tools.run("tar cJvf tests.tar.xz ./test1.txt ./test2.txt")
            self.tools.extract("tests.tar.xz", "extracted/", files=["./test1.txt"])
            self.assertExists("extracted/test1.txt")
            self.assertNotExists("extracted/test2.txt")

    def test_move(self):
        """
        --- file: dir1/test1.txt
        --- file: dir2/test2.txt
        ---
        """
        with self.tools.cwd(self.ws):
            self.tools.move("dir1/test1.txt", "dir1/test1_1.txt")
            self.assertExists("dir1/test1_1.txt")

            self.tools.move("dir1", "dir1_1")
            self.assertExists("dir1_1/test1_1.txt")

            self.tools.move("dir1_1/test1_1.txt", "dir2")
            self.assertExists("dir1_1")
            self.assertExists("dir2/test1_1.txt")

            self.tools.move("dir2", "dir1_1")
            self.assertExists("dir1_1/dir2/test1_1.txt")
            self.assertExists("dir1_1/dir2/test2.txt")

    def test_read_depfile(self):
        """
        --- file: test.d
        output1: in\ put1 input2 \
          input3 \
           input4

        output2: input1  input4

        build.dir/proto/dog.pb.cc \
        build.dir/proto/dog.pb.h: proto/dog.proto
        ---
        """
        with self.tools.cwd(self.ws):
            deps = self.tools.read_depfile("test.d")

        self.assertIn("build.dir/proto/dog.pb.cc", deps)
        self.assertIn("proto/dog.proto", deps["build.dir/proto/dog.pb.cc"])

        self.assertIn("build.dir/proto/dog.pb.h", deps)
        self.assertIn("proto/dog.proto", deps["build.dir/proto/dog.pb.h"])

        self.assertIn("output1", deps)
        self.assertIn("in put1", deps["output1"])
        self.assertIn("input2", deps["output1"])
        self.assertIn("input3", deps["output1"])
        self.assertIn("input4", deps["output1"])

        self.assertIn("output2", deps)
        self.assertIn("input1", deps["output2"])
        self.assertIn("input4", deps["output2"])

    def test_render(self):
        """
        --- file: identity.template
        {{{{ identity }}}}
        --- file: arg.template
        {{{{ arg }}}}
        --- file: tools.template
        {{{{ tools.expand_path("test") }}}}
        --- tasks:
        class A(Task):
            def run(self, deps, tools):
                assert tools.render(tools.read_file("identity.template")) == self.identity
                assert tools.render(tools.read_file("arg.template"), arg="argvalue") == "argvalue"
                assert tools.render(tools.read_file("tools.template")) == tools.expand_path("test")
        ---
        """
        self.build("a")

    def test_render_file(self):
        """
        --- file: identity.template
        {{{{ identity }}}}
        --- file: arg.template
        {{{{ arg }}}}
        --- file: tools.template
        {{{{ tools.expand_path("test") }}}}
        --- tasks:
        class A(Task):
            def run(self, deps, tools):
                assert tools.render_file("identity.template") == self.identity
                assert tools.render_file("arg.template", arg="argvalue") == "argvalue"
                assert tools.render_file("tools.template") == tools.expand_path("test")
        ---
        """
        self.build("a")

    def test_run_environment_variables(self):
        s = self.tools.run("echo $JOLTDIR")
        self.assertEqual(s, self.joltdir)
        s = self.tools.run("echo $JOLTBUILDDIR")
        self.assertEqual(s, self.tools.buildroot)
        s = self.tools.run("echo $JOLTCACHEDIR")
        from jolt import config
        self.assertEqual(s, config.get_cachedir())

    def test_run_prefix(self):
        s = self.tools.run("uname")
        self.assertEqual(s, "Linux")
        with self.tools.runprefix("echo"):
            s = self.tools.run("uname")
            self.assertEqual(s, "uname")
            with self.tools.runprefix("abc"):
                s = self.tools.run("uname")
                self.assertEqual(s, "abc uname")
        s = self.tools.run("uname")
        self.assertEqual(s, "Linux")

    def test_run_shell(self):
        s = self.tools.run("echo Hello world")
        self.assertEqual(s, "Hello world")

        with self.assertRaises(Exception, msg="No such file"):
            s = self.tools.run("echo Hello world", shell=False)

        s = self.tools.run(["sh", "-c", "echo Hello world"], shell=False)
        self.assertEqual(s, "Hello world")

    def test_run_timeout(self):
        from datetime import datetime

        start = datetime.now()
        with self.assertRaises(Exception):
            self.tools.run("sleep 10", timeout=2)
        end = datetime.now()
        self.assertLessEqual((end-start).seconds, 3)

        start = datetime.now()
        with self.assertRaises(Exception):
            self.tools.run(["sleep", "10"], timeout=2, shell=False)
        end = datetime.now()
        self.assertLessEqual((end-start).seconds, 3)

    def test_rsync(self):
        """
        --- file: a/new/file
        --- file: a/new/directory/file
        --- file: a/file/file
        --- file: a/directory
        --- file: a/test1.txt
        test
        --- file: a/test2.txt
        test2
        --- file: a/test3.txt
        test3
        --- file: b/deleted/file
        --- file: b/deleted/directory/file
        --- file: b/file
        --- file: b/directory/file
        --- file: b/test1.txt
        tset
        --- file: b/test2.txt
        tset
        --- file: b/test3.txt
        test3
        ---
        """
        with self.tools.cwd(self.ws):
            def mtime(path):
                return os.stat(self.tools.expand_path(path)).st_mtime
            mtime_atest1 = mtime("a/test1.txt")
            mtime_atest2 = mtime("a/test2.txt")
            mtime_btest3_1 = mtime("b/test3.txt")
            time.sleep(2)  # To make mtime differ
            self.tools.rsync("a", "b")
            self.assertExists("b/new")
            self.assertNotExists("b/deleted")
            self.assertNotExists("b/directory/file")
            self.assertExists("b/directory")
            self.assertExists("b/file/file")
            self.assertEqual(self.tools.read_file("a/test1.txt"),
                             self.tools.read_file("b/test1.txt"))
            self.assertEqual(self.tools.read_file("a/test2.txt"),
                             self.tools.read_file("b/test2.txt"))
            self.assertEqual(self.tools.read_file("a/test3.txt"),
                             self.tools.read_file("b/test3.txt"))

            mtime_btest1 = mtime("b/test1.txt")
            mtime_btest2 = mtime("b/test2.txt")
            mtime_btest3_2 = mtime("b/test3.txt")
            self.assertGreater(mtime_btest1, mtime_atest1+1)
            self.assertGreater(mtime_btest2, mtime_atest2+1)
            self.assertEqual(mtime_btest3_1, mtime_btest3_2)

    def test_sandbox(self):
        """
        --- file: test.txt
        test
        --- tasks:
        @influence.files("test*")
        class A(Task):
            def publish(self, a, t):
                a.collect("test.txt", "test2.txt")

        class B(Task):
            requires = "a"

            def run(self, d, t):
                s = t.sandbox(d["a"])
                c = t.read_file(s + "/test2.txt")
                assert "test" in c, "unexpected file content: " + c
        ---
        """
        self.build("b")

    def test_write_file(self):
        """
        --- tasks:
        class A(Task):
            value = 1

            def run(self, d, t):
                t.write_file("1.txt", "{{value}}")
                t.write_file("value.txt", "{{value}}", expand=False)
        ---
        """
        self.build("a")
        with self.tools.cwd(self.ws):
            self.assertEqual("1", self.tools.read_file("1.txt"))
            self.assertEqual("{value}", self.tools.read_file("value.txt"))

    def test_deprecated(self):
        """
        --- tasks:
        from jolt.utils import deprecated

        class A(Task):
            @deprecated
            def obsolete(self):
                pass

            def run(self, d, t):
                self.obsolete()
        ---
        """
        r = self.build("a")
        self.assertIn("method is deprecated: A.obsolete", r)

    def test_version(self):
        from jolt.version_utils import version, requirement

        self.assertLess(version("0.9.0"), version("0.9.1"))
        self.assertGreater(version("0.9.1"), version("0.9.0"))
        self.assertEqual(version("0.9.0"), version("0.9.0"))

        self.assertLess(version("0.9.0"), version("0.10.0"))
        self.assertGreater(version("0.10.0"), version("0.9.0"))

        self.assertLess(version("1.0.0"), version("2.0.0"))
        self.assertGreater(version("2.0.0"), version("1.0.0"))

        self.assertLess(version("1.1.0"), version("2.0.0"))
        self.assertGreater(version("2.0.0"), version("1.1.0"))

        self.assertLess(version("1.1.1"), version("2.0.0"))
        self.assertGreater(version("2.0.0"), version("1.1.1"))

        self.assertTrue(requirement(">1.0.0").satisfied(version("2.0.0")))
        self.assertFalse(requirement(">1.0").satisfied(version("1.0.1")))
        self.assertTrue(requirement(">1.0").satisfied(version("1.1.0")))

        self.assertTrue(requirement(">=1.0.0").satisfied(version("2.0.0")))
        self.assertTrue(requirement(">=1.0").satisfied(version("1.0.0")))
        self.assertTrue(requirement(">=1.0").satisfied(version("1.0")))

        self.assertFalse(requirement("1.0.0").satisfied(version("2.0.0")))
        self.assertTrue(requirement("1.0.0").satisfied(version("1.0.0")))

        self.assertEqual(str(requirement("1.0.0")), "=1.0.0")
        self.assertEqual(str(requirement(">1.0.0")), ">1.0.0")

        self.assertEqual(version("1.0"), version("1.0.0"))
        self.assertEqual(version("1.0"), version("1.0.1"))

        self.assertEqual(requirement(">1.0.0").required(), version("1.0.1"))
        self.assertEqual(requirement(">1.0").required(), version("1.1"))
        self.assertEqual(requirement(">=1.0").required(), version("1.0"))
        self.assertEqual(requirement("<=1.0").required(), version("1.0"))

    def test_unshare(self):
        uid = os.getuid()
        gid = os.getgid()

        with self.tools.unshare() as ns, ns:
            self.assertEqual(os.geteuid(), 0)
            self.assertEqual(os.getegid(), 0)
            self.assertEqual(self.tools.run("id -u"), "0")
            self.assertEqual(self.tools.run("id -g"), "0")
            with self.tools.cwd(self.ws):
                self.tools.write_file(self.tools.expand_path("file1"), "")
                self.tools.write_file(self.tools.expand_path("file2"), "")
                os.chown(self.tools.expand_path("file2"), 1, 1)
        with self.tools.cwd(self.ws):
            st = os.stat(self.tools.expand_path("file1"))
            self.assertEqual(st.st_uid, uid)
            self.assertEqual(st.st_gid, gid)
            st = os.stat(self.tools.expand_path("file2"))
            self.assertEqual(st.st_uid, 100000)
            self.assertEqual(st.st_gid, 100000)

        with self.tools.unshare(uidmap=[(0, uid, 1)], gidmap=[(0, gid, 1)]) as ns, ns:
            self.assertEqual(os.geteuid(), 0)
            self.assertEqual(os.getegid(), 0)
            self.assertEqual(self.tools.run("id -u"), "0")
            self.assertEqual(self.tools.run("id -g"), "0")
            with self.tools.cwd(self.ws):
                self.tools.write_file(self.tools.expand_path("file3"), "")
                self.tools.write_file(self.tools.expand_path("file4"), "")
                try:
                    os.chown(self.tools.expand_path("file4"), 1, 1)
                except OSError as e:
                    if e.errno != errno.EINVAL:
                        raise e
        with self.tools.cwd(self.ws):
            st = os.stat(self.tools.expand_path("file3"))
            self.assertEqual(st.st_uid, uid)
            self.assertEqual(st.st_gid, gid)

        with self.tools.unshare(uid=uid, gid=gid) as ns, ns:
            self.assertEqual(os.geteuid(), uid)
            self.assertEqual(os.getegid(), gid)
            self.assertEqual(self.tools.run("id -u"), str(uid))
            self.assertEqual(self.tools.run("id -g"), str(gid))

        try:
            with self.tools.unshare() as ns, ns:
                raise TestException()
        except TestException:
            pass

        try:
            with self.tools.unshare(gidmap=[]) as ns, ns:
                pass
        except JoltError as e:
            assert "Invalid gid map" in str(e), e

        try:
            with self.tools.unshare(uidmap=[]) as ns, ns:
                pass
        except JoltError as e:
            assert "Invalid uid map" in str(e), e

    def test_command_timeout_config(self):
        """
        --- config:
        command_timeout = 1

        --- tasks:
        class A(Task):
            def run(self, d, t):
                t.run("sleep 2")
        ---
        """

        with self.assertRaises(Exception):
            self.build("a")
        self.assertIn("Command timeout: sleep 2", self.lastLog())

    def test_block_timeout(self):
        with self.tools.timeout(1):
            time.sleep(2)
        with self.assertRaises(TimeoutError):
            with self.tools.timeout(1):
                time.sleep(2)
