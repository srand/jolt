#!/usr/bin/env python

import json
import os
import sys
sys.path.append(".")

import testsupport


@testsupport.enable_network_testing
class BuildCli(testsupport.JoltTest):
    name = "cli/build"

    @testsupport.skip_if_network
    def test_no_args(self):
        """
        --- tasks:
        class Default(Task):
            pass
        ---
        """
        r1 = self.jolt("")
        self.assertBuild(r1, "default")

    @testsupport.skip_if_network
    def test_no_args_and_config(self):
        """
        --- config:
        default=custom
        --- tasks:
        class Custom(Task):
            pass
        ---
        """
        r1 = self.jolt("")
        self.assertBuild(r1, "custom")

    @testsupport.skip_if_local
    def test_no_download(self):
        """
        --- tasks:
        class A(Task):
            pass
        ---
        """
        r = self.jolt("build -n --no-download a")
        self.assertBuild(r, "a")
        r = self.jolt("build a")
        self.assertDownload(r, "a")

    @testsupport.skip_if_local
    def test_no_download_persistent(self):
        """
        --- tasks:
        @attributes.artifact("logs", session=True)
        class A(Task):
            def publish_logs(self, a, t):
                pass
        ---
        """
        r = self.jolt("build -n --no-download-persistent a -vvv")
        self.assertBuild(r, "a")
        a = self.artifacts(r)
        self.assertEqual(1, len(a))

        r = self.jolt("build a")
        self.assertDownload(r, "a")
        a = self.artifacts(r)
        self.assertEqual(1, len(a))

    @testsupport.skip_if_local
    def test_no_upload(self):
        """
        --- tasks:
        class A(Task):
            pass
        class B(Task):
            pass
        ---
        """
        r = self.jolt("build a")
        self.assertBuild(r, "a")
        r = self.jolt("build -n --no-upload a")
        self.assertBuild(r, "a")
        r = self.jolt("build b")
        self.assertBuild(r, "b")
        r = self.jolt("build -n b")
        self.assertUpload(r, "b")

    def test_return_value(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        self.build("pass")
        with self.assertRaises(Exception, msg="always fails"):
            self.build("fail")


    def test_force(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Pass2(Task):
            pass
        ---
        """
        r1 = self.build("pass")
        self.assertBuild(r1, "pass")

        r2 = self.build("pass")
        self.assertNoBuild(r2, "pass")

        r3 = self.build("-f pass")
        self.assertBuild(r3, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r3))

        r4 = self.build("-f pass")
        self.assertBuild(r4, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r4))
        self.assertNotEqual(self.artifacts(r3), self.artifacts(r4))

        r5 = self.build("pass pass2")
        self.assertNoBuild(r5, "pass")
        self.assertBuild(r5, "pass2")

        r5 = self.build("-f pass pass2")
        self.assertBuild(r5, "pass")
        self.assertBuild(r5, "pass2")


    def test_salt(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        ---
        """
        r1 = self.build("pass")
        self.assertBuild(r1, "pass")

        r2 = self.build("pass")
        self.assertNoBuild(r2, "pass")

        r3 = self.build("-s 1 pass")
        self.assertBuild(r3, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r3))

        r4 = self.build("-s 1 pass")
        self.assertNoBuild(r4, "pass")

    def test_default(self):
        """
        --- tasks:
        class A(Task):
            arg = Parameter("default")

            def run(self, d, t):
                self.info("x{{}}x", self.arg.get_value())
                raise_error_if(True, "always fails")

        class B(Task):
            requires = ["a"]
        ---
        """
        with self.assertRaises(Exception, msg="always fails"):
            self.build("b")
        r1 = self.lastLog()
        self.assertBuild(r1, "a")
        self.assertIn("xdefaultx", r1)

        with self.assertRaises(Exception, msg="always fails"):
            self.build("b -d a:arg=nondefault")
        r2 = self.lastLog()
        self.assertBuild(r2, "a")
        self.assertIn("xnondefaultx", r2)

    def test_copy(self):
        """
        --- file: dir/temp
        --- file: dir2/temp
        --- tasks:
        @influence.files("test.jolt")
        class A(Task):
            def run(self, d, t):
                pass

            def publish(self, a, t):
                a.collect("test.jolt", "test.py")
                a.collect("test.jolt", "directory/test.py")
        ---
        """
        self.build("a -c artifact/copy")
        self.assertExists(self.ws+"/artifact/copy/test.py")
        self.assertExists(self.ws+"/artifact/copy/directory/test.py")

        self.build("a -c dir2")
        self.assertExists(self.ws+"/dir2/test.py")
        self.assertExists(self.ws+"/dir2/directory/test.py")

        with self.tools.cwd(self.ws + "/dir"):
            self.tools.run("jolt -c ../test.conf -c ../net.conf build -f a -c .")
        self.assertExists(self.ws+"/dir/test.py")
        self.assertExists(self.ws+"/dir/directory/test.py")

    def test_result(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        r1 = self.build("pass --result pass.xml")
        self.assertExists(self.ws+"/pass.xml")
        self.assertIn('task name="pass"', self.tools.read_file(self.ws+"/pass.xml"))

        with self.assertRaises(Exception, msg="always fails"):
            r1 = self.build("fail --result fail.xml")
        self.assertExists(self.ws+"/fail.xml")
        self.assertIn('task name="fail"', self.tools.read_file(self.ws+"/fail.xml"))

    def test_keep_going(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Pass2(Task):
            requires = "pass"
            weight = 2
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        with self.assertRaises(Exception, msg="always fails"):
            self.build("-k pass2 fail")
        r1 = self.lastLog()
        self.assertBuild(r1, "pass2")

    @testsupport.skip_if_local
    def test_fast_task(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            fast = True
            requires = "r"

        class B(Task):
            requires = "a", "r"

        class C(Task):
            requires = "b"
        ---
        """
        r1 = self.build("c")
        l1 = self.tasks(r1, local=True)
        self.assertEqual(l1, ["a"])

    @testsupport.skip_if_local
    def test_fast_task_with_deps(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            pass

        class B(Task):
            fast = True
            requires = "a", "r"

        class C(Task):
            requires = "b"
        ---
        """
        r1 = self.build("c")
        l1 = self.tasks(r1, local=True)
        self.assertEqual(l1, [])

        r1 = self.build("-s 1 a r")
        l1 = self.tasks(r1, remote=True)
        self.assertEqual(l1, ["a"])
        r2 = self.build("-s 1 c")
        l2 = self.tasks(r2, local=True)
        self.assertEqual(l2, ["b"])

    @testsupport.skip_if_local
    def test_fast_task_with_unavailable_resource_dep(self):
        """
        --- tasks:
        class A(Task):
            pass

        class R(Resource):
            requires = "a"

        class B(Task):
            fast = True
            requires = "r"
        ---
        """
        r1 = self.build("b")
        l1 = self.tasks(r1, local=True)
        self.assertEqual(l1, [])

    def test_error_messages(self):
        """
        --- tasks:
        class Assert(Task):
            def run(self, deps, tools):
                assert False

        class AssertMsg(Task):
            def run(self, deps, tools):
                assert False, "always fails"

        class Command(Task):
            def run(self, deps, tools):
                tools.run("false")

        class Error(Task):
            def run(self, deps, tools):
                from jolt import error
                error.raise_task_error(self, "this is an error")
        ---
        """
        with self.assertRaises(Exception):
            self.build("assert")
        r1 = self.lastLog()
        self.assertIn("AssertionError: assert False (test.jolt, line 8, in run)", r1)

        with self.assertRaises(Exception):
            self.build("assertmsg")
        r1 = self.lastLog()
        self.assertIn("AssertionError: always fails (test.jolt, line 12, in run)", r1)

        with self.assertRaises(Exception):
            self.build("command")
        r1 = self.lastLog()
        self.assertIn("Command failed: false", r1)

        with self.assertRaises(Exception):
            self.build("error")
        r1 = self.lastLog()
        self.assertIn("this is an error", r1)

    def test_error_message_syntax_error(self):
        """
        --- tasks:
        class Syntax(Task):
            def run(self, deps, tools):
                x*
        ---
        """
        with self.assertRaises(Exception):
            self.build("syntax")
        r1 = self.lastLog()
        self.assertIn("SyntaxError: x* (test.jolt, line 8)", r1)

    def test_export(self):
        """
        --- tasks:
        import os

        class Pass(Task):
            export = Export(lambda x: os.getenv("ENVVAR"))

            def run(self, deps, tools):
                assert self.export.value is not None and self.export.value == "value"
        ---
        """
        with self.tools.environ(ENVVAR="value"):
            r = self.build("pass")
        a = self.artifacts(r)
        self.tools.run("cat {}/.build.log", a[0])

    def test_export_value_in_requirement(self):
        """
        --- tasks:
        from jolt import EnvironExport

        class Test(Task):
            env = EnvironExport("ENV")
            requires = ["dep:arg={{env}}"]

        class Dep(Task):
            arg = Parameter()
            def run(self, deps, tools):
                assert self.arg == "123"
        ---
        """
        with self.tools.environ(ENV="123"):
            self.build("test")

    def test_force_requirement(self):
        """
        --- tasks:
        class Dep(Task):
            def run(self, deps, tools):
                pass

        class A(Task):
            requires = "dep"
            def run(self, deps, tools):
                deps["dep"]

        class B(Task):
            requires = "a"
            def run(self, deps, tools):
                deps["a"]

        class C(Task):
            requires = "b"
            def run(self, deps, tools):
                deps["b"]
        ---
        """
        r = self.build("c")
        self.assertBuild(r, "a")
        self.assertBuild(r, "b")
        self.assertBuild(r, "c")

        r = self.build("c")
        self.assertNoBuild(r, "c")

        r = self.build("c -f a")
        self.assertBuild(r, "a")
        self.assertBuild(r, "b")
        self.assertBuild(r, "c")

    def test_environ(self):
        """
        --- tasks:
        @attributes.environ("FOO")
        class A(Task):
            def run(self, deps, tools):
                assert tools.getenv("FOO") == "bar", "incorrect value of envvar."
            def publish(self, artifact, tools):
                artifact.environ.BAR = "bar"

        @attributes.environ("BAR")
        class B(Task):
            requires = "a"
            def run(self, deps, tools):
                assert tools.getenv("BAR") == "bar", "incorrect value of envvar."
        ---
        """
        with self.tools.environ(FOO="bar", BAR="foo"):
            r = self.build("b")
            self.assertBuild(r, "a")
            self.assertBuild(r, "b")

        with self.tools.environ(FOO="bar", BAR="foo2"):
            r = self.build("b")
            self.assertNoBuild(r, "a")
            self.assertBuild(r, "b")

    @testsupport.skip_if_local
    def test_cache_forced_discard(self):
        """
        --- tasks:
        class A(Task):
            def unpack(self, artifact, tools):
                self.info("Running unpack!")

        class B(Task):
            requires = ["a"]
        ---
        """
        r = self.build("b")
        self.assertBuild(r, "a")
        self.assertBuild(r, "b")

        for i in [0, 1]:
            self.jolt("clean a b")
            self.tools.run("docker run --rm -i -v jolt_test_cache-http:/cache -w /cache busybox:latest find  -delete")
            r = self.build("a b")
            self.assertBuild(r, "a")
            self.assertBuild(r, "b")

            a = self.artifacts(r)

            with self.tools.cwd(a[0]):
                log = self.tools.read_file(".build.log")
                self.assertIn("Evicted", log)

                manifest = self.tools.read_file(".manifest.json")
                manifest = json.loads(manifest)
                print(manifest)
                self.assertTrue(manifest["uploadable"])
                self.assertFalse(manifest["unpacked"])

            with self.tools.cwd(a[1]):
                log = self.tools.read_file(".build.log")
                self.assertIn("Running unpack!", log)

    @testsupport.skip_if_local
    def test_cache_forced_discard_when_worker_cache_db_cleared(self):
        """
        --- tasks:
        class A(Task):
            def unpack(self, artifact, tools):
                self.info("Running unpack!")

        class B(Task):
            requires = ["a"]
        ---
        """
        r = self.build("b")
        self.assertBuild(r, "a")
        self.assertBuild(r, "b")

        for i in [0, 1]:
            self.jolt("clean a b")
            self.tools.run("docker run --rm -i -v jolt_test_cache-http:/cache -w /cache busybox:latest find  -delete")
            self.tools.run("docker exec $(docker inspect $(docker service ps jolt_test_worker --format {{{{.ID}}}}) --format {{{{.Status.ContainerStatus.ContainerID}}}}) rm /data/cache/cache.db")
            r = self.build("a b")
            self.assertBuild(r, "a")
            self.assertBuild(r, "b")

            a = self.artifacts(r)

            with self.tools.cwd(a[0]):
                log = self.tools.run("docker logs $(docker inspect $(docker service ps jolt_test_worker --format {{{{.ID}}}}) --format {{{{.Status.ContainerStatus.ContainerID}}}})")
                self.assertIn("Artifact not present in db", log)

                manifest = self.tools.read_file(".manifest.json")
                manifest = json.loads(manifest)
                print(manifest)
                self.assertTrue(manifest["uploadable"])
                self.assertFalse(manifest["unpacked"])

            with self.tools.cwd(a[1]):
                log = self.tools.read_file(".build.log")
                self.assertIn("Running unpack!", log)

    @testsupport.skip_if_local
    def test_uncacheable(self):
        """
        --- tasks:
        class A(Task):
            cacheable = False

        class B(Task):
            requires = ["a"]
        ---
        """
        r = self.build("b")
        self.assertBuild(r, "b")

    def test_no_parameter(self):
        """
        --- tasks:
        class A(Task):
            pass

        class B(Task):
            requires = ["a"]
        ---
        """

        with self.assertRaises(Exception):
            r1 = self.jolt("build b:nope=1")
        self.assertIn("No such parameter", self.lastLog())
        with self.assertRaises(Exception):
            r1 = self.jolt("build b -d a:nope=1")
        self.assertIn("No such parameter", self.lastLog())

    def test_unstable(self):
        """
        --- tasks:
        class Unstable(Task):
            unstable = True

            def run(self, deps, tools):
                assert False, "unstable task"

        class Stable(Task):
            unstable = False

        class All(Alias):
            requires = ["stable", "unstable"]

        class Fail(Task):
            requires = ["unstable"]
        ---
        """
        self.build("all")
        with self.assertRaises(Exception):
            self.build("fail")

    def test_session_artifacts(self):
        """
        --- tasks:
        @attributes.artifact("logs", session=True)
        class Session(Task):
            fail = BooleanParameter(False)

            def run(self, deps, tools):
                assert not self.fail

            def publish_logs(self, a, t):
                with t.cwd(t.builddir()):
                    t.write_file("file.txt", "file")
                    a.collect("file.txt")

        class Consumer(Task):
            requires = ["session"]

            def run(self, deps, tools):
                deps["main@session"]
                try:
                    deps["logs@session"]
                except KeyError:
                    pass
                else:
                    assert False, "Unexpected session artifact found"
        ---
        """
        r = self.build("session")
        a = self.artifacts(r)
        self.assertEqual(2, len(a))
        self.assertExists(a[1], "file.txt")

        with self.assertRaises(Exception):
            self.build("session:fail=true")
        a = self.artifacts(self.lastLog())
        self.info("Network plugin: '{}'", self.network_plugin)
        self.assertEqual(1, len(a))
        self.assertExists(a[-1], "file.txt")

        # Trying to consume session artifact from a previous build shall fail
        self.build("consumer")

        # Download should not fail if no session artifact exists
        r = self.build("session -s1 --no-download")
        a = self.artifacts(r)
        if self.network_enabled:
            self.assertEqual(0, len(a))
        else:
            self.assertEqual(2, len(a))

        r = self.build("session -s1")
        a = self.artifacts(r)
        self.assertEqual(1, len(a))

    @testsupport.skip_if_local
    def test_session_artifact_with_resource_failure(self):
        """
        --- tasks:
        class R(Resource):
            def acquire(self, deps, artifact, tools, owner):
                assert False

        @attributes.artifact("result", session=True)
        class A(Task):
            requires = ["r"]

            def publish_result(self, artifact, tools):
                pass
        ---
        """
        with self.assertRaises(Exception):
            self.build("a")
        r = self.lastLog()
        self.assertIn("Failed to download session artifact", r)

    @testsupport.skip_if_local
    def test_session_artifact_with_publish_failure(self):
        """
        --- tasks:
        @attributes.artifact("result2", session=True)
        @attributes.artifact("result1", session=True)
        class A(Task):
            def publish_result1(self, artifact, tools):
                pass
            def publish_result2(self, artifact, tools):
                assert False
        ---
        """
        with self.assertRaises(Exception):
            self.build("a")
        r = self.lastLog()
        a = self.artifacts(r)
        self.assertEqual(1, len(a))

    def test_unstable_task_errors(self):
        """
        --- tasks:
        class Unstable(Task):
            unstable = True
            def run(self, deps, tools):
                assert False, "test1234"
        ---
        """

        r = self.build("unstable --result result.xml")
        with self.tools.cwd(self.ws):
            data = self.tools.read_file("result.xml")
            self.assertIn("test1234", data)

    @testsupport.skip_if_local
    def test_local_task_consumed(self):
        """
        --- tasks:
        class Local(Task):
            local = True

            def run(self, deps, tools):
                pass

        class Remote(Task):
            local = False

            requires = ["local"]

            def run(self, deps, tools):
                pass
        ---
        """
        r = self.build("remote")
        self.assertLocalBuild(r, "local")
        self.assertRemoteBuild(r, "remote")

    @testsupport.skip_if_local
    def test_local_task_consumer(self):
        """
        --- tasks:
        class Remote(Task):
            local = False

            def run(self, deps, tools):
                pass

        class Local(Task):
            local = True

            requires = ["remote"]

            def run(self, deps, tools):
                pass
        ---
        """
        r = self.build("local")
        self.assertLocalBuild(r, "local")
        self.assertRemoteBuild(r, "remote")

    @testsupport.skip_if_local
    def test_local_resource_consumed(self):
        """
        --- tasks:
        from jolt import log

        class R(Resource):
            local = True

            def acquire(self, artifact, deps, tools, owner):
                node = artifact.get_node()
                log.info("Acquiring local resource: {{}}", artifact.path)
                assert artifact.is_temporary()
                assert not node.options.worker

            def release(self, artifact, deps, tools, owner):
                log.info("Releasing local resource: {{}}", artifact.path)
                assert not artifact.is_temporary()

        class A(Task):
            requires = ["r"]

            def run(self, deps, tools):
                a = deps["r"]
                assert not a.is_temporary()
        ---
        """
        r = self.build("a")
        self.assertRemoteBuild(r, "a")

    @testsupport.skip_if_local
    def test_resource_artifact_on_failure(self):
        """
        --- tasks:
        class R(Resource):
            def acquire(self, artifact, deps, tools, owner):
                with tools.cwd(tools.builddir()):
                    tools.write_file("file.txt", self.instance + "-main")
                    artifact.collect("file.txt")
                assert False, "Always fails"

        class A(Task):
            requires = ["r"]
        ---
        """
        with self.assertRaises(Exception):
            self.build("a")
        with self.tools.cwd(self.ws, "cache"):
            files = self.tools.glob("**/file.txt")
            self.assertEqual(1, len(files))
            self.assertEqual(os.path.basename(os.path.dirname(files[0])), self.tools.read_file(files[0]))

    @testsupport.skip_if_local
    def test_resource_consumes_local_task(self):
        """
        --- tasks:
        class A(Task):
            local = True

            def run(self, deps, tools):
                pass

        class R(Resource):
            requires = ["a"]

            def acquire(self, artifact, deps, tools, owner):
                assert not deps["a"].is_temporary()

        class B(Task):
            requires = ["r"]

            def run(self, deps, tools):
                assert not deps["a"].is_temporary()
                assert not deps["r"].is_temporary()
        ---
        """
        r = self.build("b")
        self.assertLocalBuild(r, "a")
        self.assertRemoteBuild(r, "b")

    @testsupport.skip_if_local
    def test_local_task_consumes_resource_with_remote_dep(self):
        """
        --- tasks:
        class A(Task):
            def run(self, deps, tools):
                pass

        class R(Resource):
            requires = ["a"]

            def acquire(self, artifact, deps, tools, owner):
                assert not deps["a"].is_temporary()

        class B(Task):
            local = True
            requires = ["r"]

            def run(self, deps, tools):
                assert not deps["a"].is_temporary()
                assert not deps["r"].is_temporary()
        ---
        """
        r = self.build("b")
        self.assertRemoteBuild(r, "a")
        self.assertLocalBuild(r, "b")

    @testsupport.skip_if_local
    def test_resource_instances(self):
        """
        --- tasks:
        class R(Resource):
            value = Parameter(values=["1", "2"])

        class A(Task):
            requires = ["r:value=1"]

        class B(Task):
            requires = ["r:value=1"]
        ---
        """
        r = self.build("a b")
        self.assertRemoteBuild(r, "a")
        self.assertRemoteBuild(r, "b")
        self.assertIn("Resource acquisition started (r for a)", r)
        self.assertIn("Resource acquisition started (r for b)", r)
        self.assertIn("Resource acquisition finished after 00s (r for a)", r)
        self.assertIn("Resource acquisition finished after 00s (r for b)", r)
        self.assertIn("Resource release started (r for a)", r)
        self.assertIn("Resource release started (r for b)", r)
        self.assertIn("Resource release finished after 00s (r for a)", r)
        self.assertIn("Resource release finished after 00s (r for b)", r)

    @testsupport.skip_if_local
    def test_local_resource_instances(self):
        """
        --- tasks:
        class R(Resource):
            local = True

        class A(Task):
            requires = ["r"]

        class B(Task):
            requires = ["r"]
        ---
        """
        r = self.build("a b")
        self.assertRemoteBuild(r, "a")
        self.assertRemoteBuild(r, "b")
        self.assertIn("Resource acquisition started (r for a)", r)
        self.assertIn("Resource acquisition started (r for b)", r)
        self.assertIn("Resource acquisition finished after 00s (r for a)", r)
        self.assertIn("Resource acquisition finished after 00s (r for b)", r)
        self.assertIn("Resource release started (r for a)", r)
        self.assertIn("Resource release started (r for b)", r)
        self.assertIn("Resource release finished after 00s (r for a)", r)
        self.assertIn("Resource release finished after 00s (r for b)", r)

    @testsupport.skip_if_local
    def test_local_task_with_extension(self):
        """
        --- tasks:
        class A(Task):
            local = True

        class B(Task):
            extends = "a"
        ---
        """
        r = self.build("b")
        self.assertLocalBuild(r, "a")
        self.assertLocalBuild(r, "b")

    @testsupport.skip_if_local
    def test_task_with_local_extension(self):
        """
        --- tasks:
        class A(Task):
            pass

        class B(Task):
            extends = "a"
            local = True
        ---
        """
        r = self.build("b")
        self.assertLocalBuild(r, "a")
        self.assertLocalBuild(r, "b")

    @testsupport.skip("extensions currently not supported")
    @testsupport.skip_if_local
    def test_task_with_resource_and_local_extension(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            requires = ["r"]

        class B(Task):
            extends = "a"
            local = True
        ---
        """
        r = self.build("b")
        self.assertLocalBuild(r, "a")
        self.assertLocalBuild(r, "b")
        self.assertIn("Resource acquisition started (r for a)", r)
        self.assertIn("Resource acquisition finished after 00s (r for a)", r)
        self.assertIn("Resource release started (r for a)", r)
        self.assertIn("Resource release finished after 00s (r for a)", r)

    @testsupport.skip("extensions currently not supported")
    @testsupport.skip_if_local
    def test_local_task_with_resource_and_extension(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            local = True
            requires = ["r"]

        class B(Task):
            extends = "a"
        ---
        """
        r = self.build("b")
        self.assertLocalBuild(r, "a")
        self.assertLocalBuild(r, "b")
        self.assertIn("Resource acquisition started (r for a)", r)
        self.assertIn("Resource acquisition finished after 00s (r for a)", r)
        self.assertIn("Resource release started (r for a)", r)
        self.assertIn("Resource release finished after 00s (r for a)", r)

    @testsupport.skip("extensions currently not supported")
    @testsupport.skip_if_local
    def test_extension_with_resource(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            pass

        class B(Task):
            extends = "a"
            requires = ["r"]
        ---
        """
        r = self.build("b")
        self.assertRemoteBuild(r, "a")
        self.assertRemoteBuild(r, "b")
        self.assertIn("Resource acquisition started (r for b)", r)
        self.assertIn("Resource acquisition finished after 00s (r for b)", r)
        self.assertIn("Resource release started (r for b)", r)
        self.assertIn("Resource release finished after 00s (r for b)", r)

    @testsupport.skip("extensions currently not supported")
    @testsupport.skip_if_local
    def test_local_extension_with_resource(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            pass

        class B(Task):
            local = True
            extends = "a"
            requires = ["r"]
        ---
        """
        r = self.build("b")
        self.assertLocalBuild(r, "a")
        self.assertLocalBuild(r, "b")
        self.assertIn("Resource acquisition started (r for b)", r)
        self.assertIn("Resource acquisition finished after 00s (r for b)", r)
        self.assertIn("Resource release started (r for b)", r)
        self.assertIn("Resource release finished after 00s (r for b)", r)

    @testsupport.skip_if_local
    def test_unpack_of_resource_dep(self):
        """
        --- tasks:
        class A(Task):
            local = True

            def unpack(self, artifact, tools):
                with tools.cwd(artifact.path):
                    tools.write_file("file.txt", "file")

        class R(Resource):
            local = True
            requires = ["a"]

            def acquire(self, artifact, deps, tools, owner):
                assert not deps["a"].is_temporary()

        class B(Task):
            requires = ["r"]
        ---
        """
        self.build("b")

    def test_task_max_errors(self):
        """
        --- config:
        task_max_errors = 1

        --- tasks:
        class A(Task):
            def run(self, deps, tools):
                with self.report() as r:
                    r.add_error("error1", "error1", "error1")
                    r.add_error("error2", "error2", "error2")
                    r.add_error("error3", "error3", "error3")
                assert False
        ---
        """

        with self.assertRaises(Exception):
            self.build("a --result result.xml")

        with self.tools.cwd(self.ws):
            data = self.tools.read_file("result.xml")
            self.assertIn("error1", data)
            self.assertIn("list truncated", data)
            self.assertNotIn("error2", data)
            self.assertNotIn("error3", data)
