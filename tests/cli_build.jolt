#!/usr/bin/env python

import json
import re
import sys
import time
sys.path.append(".")

import testsupport


@testsupport.enable_network_testing
class BuildCli(testsupport.JoltTest):
    name = "cli/build"

    def test_no_args(self):
        """
        --- tasks:
        class Default(Task):
            pass
        ---
        """
        if self.network:
            self.skipTest("network build not supported")
        r1 = self.jolt("")
        self.assertBuild(r1, "default")

    def test_no_args_and_config(self):
        """
        --- config:
        default=custom
        --- tasks:
        class Custom(Task):
            pass
        ---
        """
        if self.network:
            self.skipTest("network build not supported")
        r1 = self.jolt("")
        self.assertBuild(r1, "custom")

    def test_no_download(self):
        """
        --- tasks:
        class A(Task):
            pass
        ---
        """
        if not self.network:
            self.skipTest("only network build supported")

        r = self.jolt("build -n --no-download a")
        self.assertBuild(r, "a")
        r = self.jolt("build a")
        self.assertDownload(r, "a")

    def test_no_upload(self):
        """
        --- tasks:
        class A(Task):
            pass
        class B(Task):
            pass
        ---
        """
        if not self.network:
            self.skipTest("only network build supported")

        r = self.jolt("build a")
        self.assertBuild(r, "a")
        r = self.jolt("build -n --no-upload a")
        self.assertBuild(r, "a")
        r = self.jolt("build b")
        self.assertBuild(r, "b")
        r = self.jolt("build -n b")
        self.assertUpload(r, "b")

    def test_return_value(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        self.build("pass")
        with self.assertRaises(Exception, msg="always fails"):
            self.build("fail")


    def test_force(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Pass2(Task):
            pass
        ---
        """
        r1 = self.build("pass")
        self.assertBuild(r1, "pass")

        r2 = self.build("pass")
        self.assertNoBuild(r2, "pass")

        r3 = self.build("-f pass")
        self.assertBuild(r3, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r3))

        r4 = self.build("-f pass")
        self.assertBuild(r4, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r4))
        self.assertNotEqual(self.artifacts(r3), self.artifacts(r4))

        r5 = self.build("pass pass2")
        self.assertNoBuild(r5, "pass")
        self.assertBuild(r5, "pass2")

        r5 = self.build("-f pass pass2")
        self.assertBuild(r5, "pass")
        self.assertBuild(r5, "pass2")


    def test_salt(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        ---
        """
        r1 = self.build("pass")
        self.assertBuild(r1, "pass")

        r2 = self.build("pass")
        self.assertNoBuild(r2, "pass")

        r3 = self.build("-s 1 pass")
        self.assertBuild(r3, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r3))

        r4 = self.build("-s 1 pass")
        self.assertNoBuild(r4, "pass")

    def test_default(self):
        """
        --- tasks:
        class A(Task):
            arg = Parameter("default")

            def run(self, d, t):
                self.info("x{{}}x", self.arg.get_value())
                raise_error_if(True, "always fails")

        class B(Task):
            requires = ["a"]
        ---
        """
        with self.assertRaises(Exception, msg="always fails"):
            self.build("b")
        r1 = self.lastLog()
        self.assertBuild(r1, "a")
        self.assertIn("xdefaultx", r1)

        with self.assertRaises(Exception, msg="always fails"):
            self.build("b -d a:arg=nondefault")
        r2 = self.lastLog()
        self.assertBuild(r2, "a")
        self.assertIn("xnondefaultx", r2)

    def test_copy(self):
        """
        --- file: dir/temp
        --- file: dir2/temp
        --- tasks:
        @influence.files("test.jolt")
        class A(Task):
            def run(self, d, t):
                pass

            def publish(self, a, t):
                a.collect("test.jolt", "test.py")
                a.collect("test.jolt", "directory/test.py")
        ---
        """
        self.build("a -c artifact/copy")
        self.assertExists(self.ws+"/artifact/copy/test.py")
        self.assertExists(self.ws+"/artifact/copy/directory/test.py")

        self.build("a -c dir2")
        self.assertExists(self.ws+"/dir2/test.py")
        self.assertExists(self.ws+"/dir2/directory/test.py")

        with self.tools.cwd(self.ws + "/dir"):
            self.tools.run("jolt -c ../test.conf -c ../net.conf build -f a -c .")
        self.assertExists(self.ws+"/dir/test.py")
        self.assertExists(self.ws+"/dir/directory/test.py")

    def test_result(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        r1 = self.build("pass --result pass.xml")
        self.assertExists(self.ws+"/pass.xml")
        self.assertIn('task name="pass"', self.tools.read_file(self.ws+"/pass.xml"))

        with self.assertRaises(Exception, msg="always fails"):
            r1 = self.build("fail --result fail.xml")
        self.assertExists(self.ws+"/fail.xml")
        self.assertIn('task name="fail"', self.tools.read_file(self.ws+"/fail.xml"))

    def test_keep_going(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Pass2(Task):
            requires = "pass"
            weight = 2
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        with self.assertRaises(Exception, msg="always fails"):
            self.build("-k pass2 fail")
        r1 = self.lastLog()
        self.assertBuild(r1, "pass2")

    def test_amqp_task_deduplication(self):
        """
        --- tasks:
        class Sleep(Task):
            t = Parameter()

            def run(self, d, tools):
                tools.run("sleep {{t}}")
        ---
        """
        if not self.network:
            self.skipTest("network build deployment required")

        self.info("Network plugin: '{}'", self.network_plugin)
        if self.network_plugin != "amqp":
            self.skipTest("amqp network plugin required")

        # Starting two builds in parallel
        with self.assertRaises(Exception), self.tools.cwd(self.ws):
            self.tools.run("timeout 5 jolt -c test.conf -c net.conf -c jolt.cachedir={ws}/c1 "
                           "build -n sleep:t=10")
        self.jolt(f"-c jolt.cachedir={self.ws}/c2 build -n sleep:t=10")
        self.tools.run("sleep 10")

        # Assert that only one build request reaches the worker
        log = self.tools.run("docker service logs jolt_test_worker", output=False)
        matches = re.findall(r"Finalizing: sleep:t=10", log, re.M)
        self.assertEqual(len(matches), 1)

    def test_amqp_task_priority(self):
        """
        --- tasks:
        class Sleep2(Task):
            t = Parameter()

            def run(self, d, tools):
                tools.run("sleep {{t}}")
        ---
        """
        if not self.network:
            self.skipTest("network build deployment required")

        if self.network_plugin != "amqp":
            self.skipTest("amqp network plugin required")

        # Starting a task to keep the worker occupied
        with self.assertRaises(Exception), self.tools.cwd(self.ws):
            self.tools.run("timeout 2 jolt -c test.conf -c net.conf -c jolt.cachedir={ws}/c1 "
                           "build -n sleep2:t=10")

        # And a second task to be overtaken in the the queue
        with self.assertRaises(Exception), self.tools.cwd(self.ws):
            self.tools.run("timeout 2 jolt -c test.conf -c net.conf -c jolt.cachedir={ws}/c2 "
                           "build -n sleep2:t=9")

        # Then a third task to jump ahead in the queue.
        with self.tools.cwd(self.ws):
            self.tools.run("jolt -c test.conf -c net.conf -c jolt.cachedir={ws}/c3 -c amqp.priority=1 "
                           "-vv build -n sleep2:t=1")

        # "Wait" for second task
        with self.tools.cwd(self.ws):
            r = self.tools.run("jolt -c test.conf -c net.conf -c jolt.cachedir={ws}/c4 "
                               "build -n sleep2:t=9")

        # Now check the execution order in the worker
        log = self.tools.run("docker service logs jolt_test_worker", output=False)
        t = re.findall("xecution started.*?\((sleep2.*) [^ ]*\)", log)
        print(t, log)
        self.assertEqual(t[0], "sleep2:t=10")
        self.assertEqual(t[1], "sleep2:t=1")
        self.assertEqual(t[2], "sleep2:t=9")

    def test_fast_task(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            fast = True
            requires = "r"

        class B(Task):
            requires = "a", "r"

        class C(Task):
            requires = "b"
        ---
        """
        if not self.network:
            self.skipTest("network build deployment required")

        r1 = self.build("c")
        l1 = self.tasks(r1, local=True)
        self.assertEqual(l1, ["a"])

    def test_fast_task_with_deps(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            pass

        class B(Task):
            fast = True
            requires = "a", "r"

        class C(Task):
            requires = "b"
        ---
        """
        if not self.network:
            self.skipTest("network build deployment required")

        r1 = self.build("c")
        l1 = self.tasks(r1, local=True)
        self.assertEqual(l1, [])

        r1 = self.build("-s 1 a r")
        l1 = self.tasks(r1, remote=True)
        self.assertEqual(l1, ["a"])
        r2 = self.build("-s 1 c")
        l2 = self.tasks(r2, local=True)
        self.assertEqual(l2, ["b"])

    def test_fast_task_with_unavailable_resource_dep(self):
        """
        --- tasks:
        class A(Task):
            pass

        class R(Resource):
            requires = "a"

        class B(Task):
            fast = True
            requires = "r"
        ---
        """
        if not self.network:
            self.skipTest("network build deployment required")

        r1 = self.build("b")
        l1 = self.tasks(r1, local=True)
        self.assertEqual(l1, [])

    def test_error_messages(self):
        """
        --- tasks:
        class Assert(Task):
            def run(self, deps, tools):
                assert False

        class AssertMsg(Task):
            def run(self, deps, tools):
                assert False, "always fails"

        class Command(Task):
            def run(self, deps, tools):
                tools.run("false")

        class Error(Task):
            def run(self, deps, tools):
                from jolt import error
                error.raise_task_error(self, "this is an error")
        ---
        """
        with self.assertRaises(Exception):
            self.build("assert")
        r1 = self.lastLog()
        self.assertIn("AssertionError: assert False (test.jolt, line 8, in run)", r1)

        with self.assertRaises(Exception):
            self.build("assertmsg")
        r1 = self.lastLog()
        self.assertIn("AssertionError: always fails (test.jolt, line 12, in run)", r1)

        with self.assertRaises(Exception):
            self.build("command")
        r1 = self.lastLog()
        self.assertIn("Command failed: false", r1)

        with self.assertRaises(Exception):
            self.build("error")
        r1 = self.lastLog()
        self.assertIn("this is an error", r1)

    def test_error_message_syntax_error(self):
        """
        --- tasks:
        class Syntax(Task):
            def run(self, deps, tools):
                x*
        ---
        """
        with self.assertRaises(Exception):
            self.build("syntax")
        r1 = self.lastLog()
        self.assertIn("SyntaxError: x* (test.jolt, line 8)", r1)

    def test_export(self):
        """
        --- tasks:
        import os

        class Pass(Task):
            export = Export(lambda x: os.getenv("ENVVAR"))

            def run(self, deps, tools):
                assert self.export.value is not None and self.export.value == "value"
        ---
        """
        with self.tools.environ(ENVVAR="value"):
            r = self.build("pass")
        a = self.artifacts(r)
        self.tools.run("cat {}/.build.log", a[0])

    def test_export_value_in_requirement(self):
        """
        --- tasks:
        from jolt import EnvironExport

        class Test(Task):
            env = EnvironExport("ENV")
            requires = ["dep:arg={{env}}"]

        class Dep(Task):
            arg = Parameter()
            def run(self, deps, tools):
                assert self.arg == "123"
        ---
        """
        with self.tools.environ(ENV="123"):
            self.build("test")

    def test_force_requirement(self):
        """
        --- tasks:
        class Dep(Task):
            def run(self, deps, tools):
                pass

        class A(Task):
            requires = "dep"
            def run(self, deps, tools):
                deps["dep"]

        class B(Task):
            requires = "a"
            def run(self, deps, tools):
                deps["a"]

        class C(Task):
            requires = "b"
            def run(self, deps, tools):
                deps["b"]
        ---
        """
        r = self.build("c")
        self.assertBuild(r, "a")
        self.assertBuild(r, "b")
        self.assertBuild(r, "c")

        r = self.build("c")
        self.assertNoBuild(r, "c")

        r = self.build("c -f a")
        self.assertBuild(r, "a")
        self.assertBuild(r, "b")
        self.assertBuild(r, "c")

    def test_environ(self):
        """
        --- tasks:
        @attributes.environ("FOO")
        class A(Task):
            def run(self, deps, tools):
                assert tools.getenv("FOO") == "bar", "incorrect value of envvar."
            def publish(self, artifact, tools):
                artifact.environ.BAR = "bar"

        @attributes.environ("BAR")
        class B(Task):
            requires = "a"
            def run(self, deps, tools):
                assert tools.getenv("BAR") == "bar", "incorrect value of envvar."
        ---
        """
        with self.tools.environ(FOO="bar", BAR="foo"):
            r = self.build("b")
            self.assertBuild(r, "a")
            self.assertBuild(r, "b")

        with self.tools.environ(FOO="bar", BAR="foo2"):
            r = self.build("b")
            self.assertNoBuild(r, "a")
            self.assertBuild(r, "b")

    def test_cache_forced_discard(self):
        """
        --- tasks:
        class A(Task):
            def unpack(self, artifact, tools):
                self.info("Running unpack!")

        class B(Task):
            requires = ["a"]
        ---
        """
        if not self.network:
            self.skipTest("network build required")

        r = self.build("b")
        self.assertBuild(r, "a")
        self.assertBuild(r, "b")

        for i in [0, 1]:
            self.jolt("clean a b")
            self.tools.run("docker run --rm -i -v jolt_test_cache-http:/cache -w /cache busybox:latest find -delete")
            r = self.build("a b")
            self.assertBuild(r, "a")
            self.assertBuild(r, "b")

            a = self.artifacts(r)

            with self.tools.cwd(a[0]):
                log = self.tools.read_file(".build.log")
                self.assertIn("Evicted", log)

                manifest = self.tools.read_file(".manifest.json")
                manifest = json.loads(manifest)
                print(manifest)
                self.assertTrue(manifest["uploadable"])
                self.assertFalse(manifest["unpacked"])

            with self.tools.cwd(a[1]):
                log = self.tools.read_file(".build.log")
                self.assertIn("Running unpack!", log)

    def test_uncacheable(self):
        """
        --- tasks:
        class A(Task):
            cacheable = False

        class B(Task):
            requires = ["a"]
        ---
        """
        if not self.network:
            self.skipTest("network build required")

        r = self.build("b")
        self.assertBuild(r, "b")

    def test_no_parameter(self):
        """
        --- tasks:
        class A(Task):
            pass

        class B(Task):
            requires = ["a"]
        ---
        """

        with self.assertRaises(Exception):
            r1 = self.jolt("build b:nope=1")
        self.assertIn("No such parameter", self.lastLog())
        with self.assertRaises(Exception):
            r1 = self.jolt("build b -d a:nope=1")
        self.assertIn("No such parameter", self.lastLog())

    def test_unstable(self):
        """
        --- tasks:
        class Unstable(Task):
            unstable = True

            def run(self, deps, tools):
                assert False, "unstable task"

        class Stable(Task):
            unstable = False

        class All(Alias):
            requires = ["stable", "unstable"]

        class Fail(Task):
            requires = ["unstable"]
        ---
        """
        self.build("all")
        with self.assertRaises(Exception):
            self.build("fail")

    def test_session_artifacts(self):
        """
        --- tasks:
        @attributes.artifact("logs", session=True)
        class Session(Task):
            fail = BooleanParameter(False)

            def run(self, deps, tools):
                assert not self.fail

            def publish_logs(self, a, t):
                with t.cwd(t.builddir()):
                    t.write_file("file.txt", "file")
                    a.collect("file.txt")

        class Consumer(Task):
            requires = ["session"]

            def run(self, deps, tools):
                deps["main@session"]
                try:
                    deps["logs@session"]
                except KeyError:
                    pass
                else:
                    assert False, "Unexpected session artifact found"
        ---
        """
        r = self.build("session")
        a = self.artifacts(r)
        self.assertEqual(2, len(a))
        self.assertExists(a[1], "file.txt")

        with self.assertRaises(Exception):
            self.build("session:fail=true")
        a = self.artifacts(self.lastLog())
        self.info("Network plugin: '{}'", self.network_plugin)
        if self.network_plugin == "amqp":
            # artifacts() will parse both the local and the worker's log.
            self.assertEqual(2, len(a))
        else:
            self.assertEqual(1, len(a))
        self.assertExists(a[-1], "file.txt")

        # Trying to consume session artifact from a previous build shall fail
        self.build("consumer")

        # Download should not fail if no session artifact exists
        r = self.build("session -s1 --no-download")
        a = self.artifacts(r)
        if self.network_enabled:
            self.assertEqual(0, len(a))
        else:
            self.assertEqual(2, len(a))

        r = self.build("session -s1")
        a = self.artifacts(r)
        self.assertEqual(1, len(a))


    def test_session_artifact_with_resource_failure(self):
        """
        --- tasks:
        class R(Resource):
            def acquire(self, deps, artifact, tools):
                assert False

        @attributes.artifact("result", session=True)
        class A(Task):
            requires = ["r"]

            def publish_result(self, artifact, tools):
                pass
        ---
        """
        if not self.network_enabled:
            self.skipTest("Network build required")

        with self.assertRaises(Exception):
            self.build("a")
        r = self.lastLog()
        if self.network_plugin != "amqp":
            self.assertIn("Failed to download session artifact", r)
        self.assertIn("AssertionError: assert False", r)

