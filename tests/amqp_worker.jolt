#!/usr/bin/env python

import os
import time

from jolt import *
from jolt.plugins import docker


@influence.files("../README.rst")
@influence.files("../setup.py")
@influence.files("../jolt/*.py")
@influence.files("../jolt/plugins/*.py")
@influence.files("../docker/Dockerfile.*")
@influence.files("../docker/swarm/*")
class JoltAmqp(Task):
    name = "jolt/amqp/image"

    requires = ["docker/cli"]

    def run(self, deps, tools):
        with tools.cwd(".."):
            tools.run("docker build -t robrt/jolt:{identity} -f docker/Dockerfile.test .")
            tools.run("docker build -t rabbitmq:{identity} -f docker/Dockerfile.rabbitmq .")


class AmqpWorker(Resource):
    name = "jolt/amqp/deployment"

    storage = Parameter()

    requires = ["jolt/amqp/image"]

    def acquire(self, artifact, deps, tools, owner):
        try:
            with tools.cwd(tools.builddir()):
                for file in tools.glob("{joltdir}/../docker/swarm/*"):
                    tools.copy(file, "./")
                tools.replace_in_file(
                    "jolt-amqp.yaml",
                    "jolt:latest",
                    tools.expand("jolt:{deps[jolt/amqp/image].task.identity}", deps=deps))
                tools.replace_in_file(
                    "jolt-amqp.yaml",
                    "rabbitmq:latest",
                    tools.expand("rabbitmq:{deps[jolt/amqp/image].task.identity}", deps=deps))
                tools.run("docker stack deploy -c jolt-amqp.yaml jolt_test", output_on_error=True)
                tools.run("docker service scale jolt_test_worker=1", output_on_error=True)
                config = tools.read_file("client-amqp.conf")
                config = config.replace("localhost", os.getenv("DOCKER_PUBLIC_IP", "localhost"))
                artifact.strings.config = config
                artifact.strings.plugin = "amqp"
            for i in range(0, 20):
                try:
                    assert "Queue bound" in tools.run("docker service logs jolt_test_worker", output=False)
                    break
                except:
                    time.sleep(1)
                    continue
            assert "Queue bound" in tools.run("docker service logs jolt_test_worker", output=False)
            artifact.active = True
        except Exception as e:
            if os.getenv("CI"):
                artifact.active = False
            else:
                raise e

    def release(self, artifact, deps, tools, owner):
        if artifact.active:
            tools.run("docker stack rm jolt_test")
            for i in range(0, 20):
                try:
                    tools.run("docker volume rm jolt_test_cache-http jolt_test_cache-node", output=False)
                    break
                except:
                    time.sleep(1)
                    continue
